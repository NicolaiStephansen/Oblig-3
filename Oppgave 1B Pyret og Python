Oppgave 1 B) Pyret:
#Opprett studenter 
#student1 = Student "(Tommy Johnsen, 1, gruppe12) 
#student2 = Student "(Daniel Hansen, 2, gruppe32) 
#student3 = Student "(Mathias Ødegaard, 3, gruppe25) 
#student4 = Student "(Erling Thuram, 4, gruppe13) 
#student5 = Student "(Joakim Brøgersen, 5, gruppe7)

students = table: 
  firstName, studentID, group 
  row: "Tommy Johnsen", "1", "Gruppe12"
  row: "Daniel Hansen", "2", "Gruppe32"
  row: "Mathias Ødegaard", "3", "Gruppe25"
  row: "Erling Thuram", "4", "Gruppe13"
  row: "Joakim Brøgersen", "5", "Gruppe7"
end 

fun finngruppe(navn, liste): 
  liste. filter(lam(row): row ["firstName"] == navn 
    end)
end

#Test 

finngruppe("Joakim Brøgersen", students)

Python:

    def __init__(self, navn, student_id):
        self.navn = navn
        self.student_id = student_id

# Definer "klassen" for Grupper - for å funksjonalisere forholdet mellom student og gruppe
class Gruppe:
    def __init__(self, gruppenavn, studenter):
        self.gruppenavn = gruppenavn
        self.studenter = studenter

#Funksjonen som finner ut hvilken gruppe en student hører til basert på student_id og gruppenr. 
def finn_gruppe_for_student(student_id, grupper):
    for gruppe in grupper:
        for student in gruppe.studenter:
            if student.student_id == student_id:
                return gruppe.gruppenavn
    return "Studenten tilhører ingen gruppe" 


# Eksempler som tar utgangspunkt i funksjonen
student1 = Student("Lise", 1994)
student2 = Student("Nils", 578)
student3 = Student("Kenneth", 32)
student4 = Student("Marcus", 2894)

gruppe1 = Gruppe("Gruppe 1", [student1, student2])
gruppe2 = Gruppe("Gruppe 2", [student3, student4])

#Tilgjengelige grupper
grupper = [gruppe1, gruppe2]

print(finn_gruppe_for_student(578, grupper)) #Output: Gruppe 1
print(finn_gruppe_for_student(32, grupper)) #Output: Gruppe 2
print(finn_gruppe_for_student(12395, grupper)) #Output: Studenten tilhører ingen gruppe
